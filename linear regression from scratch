import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import timeit

%%time

data1 = pd.read_excel('data1.xlsx')

data1.head()
x=data1.iloc[:,0]
y=data1.iloc[:,1]
x=pd.DataFrame(x)
x=np.array(x)
ones=np.ones((200,1))
x1=np.append(ones,x,axis=1)
y=np.array(y)
w1=[]
t=[]

# cost function

def cost(data,w):
    total_cost=0
    for i in range(200):
        total_cost+=(1/400)*((data[i]*w).sum()-y[i])**2
        t.append(total_cost)
    return total_cost

# gradient descent

def grd(data,w,alpha,iterate):
    for i in range(iterate):
        s=np.zeros(2)
        for j in range(200):
            for k in range(2):
                s[k]+=(1/200)*(np.sum((data[j]*w)-y[j])*data[j][k])
        w=w-alpha*s
        w1.append(w)
        #print(cost(data,w))
        t1=cost(data,w)
        t.append(t1)
    
    return w
                            
w=np.zeros(2)
alpha=0.001
iterate=1000
 
w=(grd(x1,w,alpha,iterate))

print('Parameters of the model are',w)
total_cost=cost(x1,w)
#plt.scatter(x,y)
w=pd.DataFrame(w)
w=np.array(w)
y_pred=(x1.dot(w))
plt.figure(figsize=(15,6))
plt.subplot(2,2,1)
plt.scatter(x,y)
plt.plot(x,y_pred,'r',label='Hyperplane')
plt.title('Hyperplane')
plt.xlabel('input values')
plt.ylabel('output')
plt.legend()
#plt.show()
plt.subplot(2,2,2)
plt.plot(t)
plt.title('Cost v/s iteration')
plt.xlabel('Iterations')
plt.ylabel('Cost')

w1=np.array(w1)
w1.shape
t=pd.DataFrame(t)
t=np.array(t)
t.shape

#plt.subplot(3,3,3)

%%time

data1 = pd.read_excel('data1.xlsx')

data1.head()
x=data1.iloc[:,0]
y=data1.iloc[:,1]
x=pd.DataFrame(x)
x=np.array(x)
ones=np.ones((200,1))
x1=np.append(ones,x,axis=1)
y=np.array(y)
w1=[]
t=[]

# cost function

def cost(data,w):
    total_cost=0
    for i in range(200):
        total_cost+=(1/400)*((data[i]*w).sum()-y[i])**2
        t.append(total_cost)
    return total_cost

# gradient descent

def grd(data,w,alpha,iterate):
    for i in range(iterate):
        s=np.zeros(2)
        for j in range(200):
            for k in range(2):
                s[k]+=(1/200)*(np.sum((data[j]*w)-y[j])*data[j][k])
        w=w-alpha*s
        w1.append(w)
        #print(cost(data,w))
        t1=cost(data,w)
        t.append(t1)
    
    return w
                            
w=np.zeros(2)
alpha=0.001
iterate=1000
 
w=(grd(x1,w,alpha,iterate))

print('Parameters of the model are',w)
total_cost=cost(x1,w)
#plt.scatter(x,y)
w=pd.DataFrame(w)
w=np.array(w)
y_pred=(x1.dot(w))
plt.figure(figsize=(15,6))
plt.subplot(2,2,1)
plt.scatter(x,y)
plt.plot(x,y_pred,'r',label='Hyperplane')
plt.title('Hyperplane')
plt.xlabel('input values')
plt.ylabel('output')
plt.legend()
#plt.show()
plt.subplot(2,2,2)
plt.plot(t)
plt.title('Cost v/s iteration')
plt.xlabel('Iterations')
plt.ylabel('Cost')

w1=np.array(w1)
w1.shape
t=pd.DataFrame(t)
t=np.array(t)
t.shape

#plt.subplot(3,3,3)

%%time

data1 = pd.read_excel('data1.xlsx')

data1.head()
x=data1.iloc[:,0]
y=data1.iloc[:,1]
x=pd.DataFrame(x)
x=np.array(x)
ones=np.ones((200,1))
x1=np.append(ones,x,axis=1)
y=np.array(y)
w1=[]
t=[]

# cost function

def cost(data,w):
    total_cost=0
    for i in range(200):
        total_cost+=(1/400)*((data[i]*w).sum()-y[i])**2
        t.append(total_cost)
    return total_cost

# gradient descent

def grd(data,w,alpha,iterate):
    for i in range(iterate):
        s=np.zeros(2)
        for j in range(200):
            for k in range(2):
                s[k]+=(1/200)*(np.sum((data[j]*w)-y[j])*data[j][k])
        w=w-alpha*s
        w1.append(w)
        #print(cost(data,w))
        t1=cost(data,w)
        t.append(t1)
    
    return w
                            
w=np.zeros(2)
alpha=0.001
iterate=1000
 
w=(grd(x1,w,alpha,iterate))

print('Parameters of the model are',w)
total_cost=cost(x1,w)
#plt.scatter(x,y)
w=pd.DataFrame(w)
w=np.array(w)
y_pred=(x1.dot(w))
plt.figure(figsize=(15,6))
plt.subplot(2,2,1)
plt.scatter(x,y)
plt.plot(x,y_pred,'r',label='Hyperplane')
plt.title('Hyperplane')
plt.xlabel('input values')
plt.ylabel('output')
plt.legend()
#plt.show()
plt.subplot(2,2,2)
plt.plot(t)
plt.title('Cost v/s iteration')
plt.xlabel('Iterations')
plt.ylabel('Cost')

w1=np.array(w1)
w1.shape
t=pd.DataFrame(t)
t=np.array(t)
t.shape

#plt.subplot(3,3,3)

